/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package de.haumacher.webgrammar.webidl.parser;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000L) != 0L)
            return 36;
         if ((active0 & 0xffffc03ffbf79080L) != 0L)
         {
            jjmatchedKind = 3;
            return 11;
         }
         if ((active0 & 0x30000000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0xffffc03ffbf79080L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 1;
            return 11;
         }
         return -1;
      case 2:
         if ((active0 & 0xfeffc03ffbf79080L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 2;
            return 11;
         }
         return -1;
      case 3:
         if ((active0 & 0xfefec03febf79080L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 3;
            return 11;
         }
         return -1;
      case 4:
         if ((active0 & 0xeeda803fea739080L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 4;
            return 11;
         }
         return -1;
      case 5:
         if ((active0 & 0xea4a803fe8339080L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 5;
            return 11;
         }
         return -1;
      case 6:
         if ((active0 & 0xea02803c68339080L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 6;
            return 11;
         }
         return -1;
      case 7:
         if ((active0 & 0xca00803068231080L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 7;
            return 11;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000801060231000L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 8;
            return 11;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000001020210000L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 9;
            return 11;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000001020000000L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 44:
         return jjStopAtPos(0, 19);
      case 45:
         return jjStartNfaWithStates_0(0, 26, 36);
      case 46:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 58:
         return jjStopAtPos(0, 42);
      case 59:
         return jjStopAtPos(0, 11);
      case 60:
         return jjStopAtPos(0, 43);
      case 61:
         return jjStopAtPos(0, 8);
      case 62:
         return jjStopAtPos(0, 44);
      case 63:
         return jjStopAtPos(0, 45);
      case 68:
         return jjMoveStringLiteralDfa1_0(0xc00000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 91:
         return jjStopAtPos(0, 38);
      case 93:
         return jjStopAtPos(0, 39);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000040000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x6000000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400400080L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000800010000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x60000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000002000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000000000201000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20001000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1c0002000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x6000002a0000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1100000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4800000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 123:
         return jjStopAtPos(0, 13);
      case 125:
         return jjStopAtPos(0, 14);
      default :
         return jjMoveNfa_0(10, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400012008080L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8200001b00000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x6801000008041000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x102a000000400000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 11);
         return jjMoveStringLiteralDfa2_0(active0, 0x401000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 41);
         break;
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 78:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 11);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000080000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x802800080L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000400000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x412000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000020008000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x84402340001000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001040000L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10001400000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 11);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 11);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x60c0000800121000L);
      case 103:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 11);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800002028000000L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000200080L);
      case 109:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 11);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000040000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2400000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x380018000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40001000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x202000300200000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0018000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x28000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000002000000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000001000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 11);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 11);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 11);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x800c00000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000008080L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 99:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 11);
         break;
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x800100000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000008000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8a00002000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400010000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 11);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000020000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000001000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200001000000080L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000200000L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 11);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800020020000L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 11);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000010000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 11);
         break;
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 11);
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L);
      case 107:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 11);
         break;
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 11);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000200000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 11);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 3, 11);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 3, 11);
         break;
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 3, 11);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 3, 11);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 3, 11);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 3, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000001000000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 3, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 3, 11);
         break;
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 3, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 36;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x3fe8cfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(3, 6);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 48)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 12);
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(5);
                  }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 0:
                  if (curChar != 48)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0xfffff80000000000L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34 && kind > 4)
                     kind = 4;
                  break;
               case 15:
                  if ((0x3fe8cfeffffd9ffL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 16:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 17:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(15, 17);
                  break;
               case 18:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(15, 17);
                  break;
               case 19:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(19, 16);
                  break;
               case 20:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(19, 16);
                  break;
               case 24:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(0, 2);
                  break;
               case 25:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(26, 16);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 12);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(30, 8);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(30, 8);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 6);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0xfffff80000000000L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if (curChar == 45)
                     jjCheckNAddStates(3, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0xd7fffffd57fffffdL & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(11);
                  }
                  break;
               case 2:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(3);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3fffffffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  jjAddStates(18, 19);
                  break;
               case 15:
                  if ((0xd7fffffd57fffffdL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 18:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(15, 17);
                  break;
               case 21:
                  jjAddStates(20, 21);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3fffffffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 6)
                     kind = 6;
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 19);
                  break;
               case 18:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(15, 17);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 36 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   25, 26, 16, 0, 4, 6, 27, 28, 29, 31, 6, 32, 33, 17, 20, 18, 
   19, 16, 13, 14, 21, 22, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\143\141\154\154\142\141\143\153", 
"\75", "\50", "\51", "\73", "\151\156\164\145\162\146\141\143\145", "\173", "\175", 
"\160\141\162\164\151\141\154", "\144\151\143\164\151\157\156\141\162\171", 
"\145\170\143\145\160\164\151\157\156", "\145\156\165\155", "\54", "\164\171\160\145\144\145\146", 
"\151\155\160\154\145\155\145\156\164\163", "\143\157\156\163\164", "\156\165\154\154", "\164\162\165\145", 
"\146\141\154\163\145", "\55", "\111\156\146\151\156\151\164\171", "\116\141\116", 
"\163\164\162\151\156\147\151\146\151\145\162", "\141\164\164\162\151\142\165\164\145", "\163\164\141\164\151\143", 
"\147\145\164\164\145\162", "\163\145\164\164\145\162", "\143\162\145\141\164\157\162", 
"\144\145\154\145\164\145\162", "\154\145\147\141\143\171\143\141\154\154\145\162", 
"\157\160\164\151\157\156\141\154", "\133", "\135", "\56", "\56\56\56", "\72", "\74", "\76", "\77", 
"\104\141\164\145", "\104\117\115\123\164\162\151\156\147", "\141\156\171", 
"\142\157\157\154\145\141\156", "\142\171\164\145", "\144\157\165\142\154\145", "\146\154\157\141\164", 
"\154\157\156\147", "\157\142\152\145\143\164", "\157\143\164\145\164", "\157\162", 
"\163\145\161\165\145\156\143\145", "\163\150\157\162\164", "\165\156\163\151\147\156\145\144", 
"\166\157\151\144", "\151\156\150\145\162\151\164", 
"\165\156\162\145\163\164\162\151\143\164\145\144", "\162\145\141\144\157\156\154\171", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[36];
private final int[] jjstateSet = new int[72];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 36; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
