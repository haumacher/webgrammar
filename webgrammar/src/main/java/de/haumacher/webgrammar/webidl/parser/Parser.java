/* Generated By:JavaCC: Do not edit this line. Parser.java */
package de.haumacher.webgrammar.webidl.parser;

@SuppressWarnings({ "javadoc", "unused", "synthetic-access" })
public class Parser implements ParserConstants {

  final public void ntDefinitions() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 7:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
      case 20:
      case 38:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      ntDefinition();
    }
  }

  final public void ntDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        jj_consume_token(8);
        ntReturnType();
        jj_consume_token(9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case 9:
        case 37:
        case 38:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 57:
        case 58:
        case 59:
        case 62:
          ntArgumentListNonEmpty();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(10);
        jj_consume_token(11);
        break;
      case 12:
        ntInterface();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 12:
      ntInterface();
      break;
    case 15:
      ntPartial();
      break;
    case 16:
      ntDictionary();
      break;
    case 17:
      ntException();
      break;
    case 18:
      ntEnum();
      break;
    case 20:
      ntTypedef();
      break;
    case IDENTIFIER:
      ntImplementsStatement();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntInterface() throws ParseException {
    jj_consume_token(12);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      ntInheritanceNonEmpty();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(13);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 22:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      ntInterfaceMember();
    }
    jj_consume_token(14);
    jj_consume_token(11);
  }

  final public void ntPartial() throws ParseException {
    jj_consume_token(15);
    ntPartialDefinition();
  }

  final public void ntPartialDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      ntPartialInterface();
      break;
    case 16:
      ntPartialDictionary();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntPartialInterface() throws ParseException {
    jj_consume_token(12);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(13);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 22:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      ntInterfaceMember();
    }
    jj_consume_token(14);
    jj_consume_token(11);
  }

  final public void ntInterfaceMembers() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 22:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      ntInterfaceMember();
    }
  }

  final public void ntInterfaceMember() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      ntConst();
      break;
    case IDENTIFIER:
    case 9:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      ntAttributeOrOperation();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntDictionary() throws ParseException {
    jj_consume_token(16);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      ntInheritanceNonEmpty();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(13);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 62:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      ntDictionaryMember();
    }
    jj_consume_token(14);
    jj_consume_token(11);
  }

  final public void ntDictionaryMembers() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 62:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      ntDictionaryMember();
    }
  }

  final public void ntDictionaryMember() throws ParseException {
    ntType();
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      ntDefaultNonEmpty();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(11);
  }

  final public void ntPartialDictionary() throws ParseException {
    jj_consume_token(16);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(13);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 62:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      ntDictionaryMember();
    }
    jj_consume_token(14);
    jj_consume_token(11);
  }

  final public void ntDefault() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      ntDefaultNonEmpty();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void ntDefaultValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      ntConstValue();
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntException() throws ParseException {
    jj_consume_token(17);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      ntInheritanceNonEmpty();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(13);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 22:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 62:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      ntExceptionMember();
    }
    jj_consume_token(14);
    jj_consume_token(11);
  }

  final public void ntExceptionMembers() throws ParseException {
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 22:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 62:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      ntExceptionMember();
    }
  }

  final public void ntInheritance() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      ntInheritanceNonEmpty();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void ntEnum() throws ParseException {
    jj_consume_token(18);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(13);
    ntEnumValueList();
    jj_consume_token(14);
    jj_consume_token(11);
  }

  final public void ntEnumValueList() throws ParseException {
    jj_consume_token(STRING);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_10;
      }
      jj_consume_token(19);
      jj_consume_token(STRING);
    }
  }

  final public void ntEnumValues() throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
      jj_consume_token(19);
      jj_consume_token(STRING);
    }
  }

  final public void ntTypedef() throws ParseException {
    jj_consume_token(20);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      ntExtendedAttributeListNonEmpty();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    ntType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(11);
  }

  final public void ntImplementsStatement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(21);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(11);
  }

  final public void ntConst() throws ParseException {
    jj_consume_token(22);
    ntConstType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(8);
    ntConstValue();
    jj_consume_token(11);
  }

  final public void ntConstValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
    case 25:
      ntBooleanLiteral();
      break;
    case FLOAT:
    case 26:
    case 27:
    case 28:
      ntFloatLiteral();
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case 23:
      jj_consume_token(23);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntBooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      break;
    case 25:
      jj_consume_token(25);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntFloatLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case 26:
      jj_consume_token(26);
      jj_consume_token(27);
      break;
    case 27:
      jj_consume_token(27);
      break;
    case 28:
      jj_consume_token(28);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntAttributeOrOperation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      ntStringifierAttributeOrOperation();
      break;
    case 30:
    case 61:
    case 63:
      ntAttribute();
      break;
    case IDENTIFIER:
    case 9:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
      ntOperation();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntStringifierAttributeOrOperation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
    case 61:
    case 63:
      ntAttribute();
      break;
    case IDENTIFIER:
    case 9:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
      ntOperationRest();
      break;
    case 11:
      jj_consume_token(11);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntAttribute() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 61:
      ntInheritNonEmpty();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      ntReadOnlyNonEmpty();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(30);
    ntType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(11);
  }

  final public void ntInherit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 61:
      ntInheritNonEmpty();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  final public void ntReadOnly() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      ntReadOnlyNonEmpty();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
  }

  final public void ntOperation() throws ParseException {
    ntQualifiers();
    ntOperationRest();
  }

  final public void ntQualifiers() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      break;
    default:
      jj_la1[43] = jj_gen;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_12;
        }
        ntSpecial();
      }
    }
  }

  final public void ntSpecials() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_13;
      }
      ntSpecial();
    }
  }

  final public void ntSpecial() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      break;
    case 33:
      jj_consume_token(33);
      break;
    case 34:
      jj_consume_token(34);
      break;
    case 35:
      jj_consume_token(35);
      break;
    case 36:
      jj_consume_token(36);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntOperationRest() throws ParseException {
    ntReturnType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ntOptionalIdentifierNonEmpty();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 9:
    case 37:
    case 38:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntArgumentListNonEmpty();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(10);
    jj_consume_token(11);
  }

  final public void ntOptionalIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ntOptionalIdentifierNonEmpty();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
  }

  final public void ntArgumentList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 9:
    case 37:
    case 38:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntArgumentListNonEmpty();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
  }

  final public void ntArguments() throws ParseException {
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_14;
      }
      jj_consume_token(19);
      ntArgument();
    }
  }

  final public void ntArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      ntExtendedAttributeListNonEmpty();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    ntOptionalOrRequiredArgument();
  }

  final public void ntOptionalOrRequiredArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      jj_consume_token(37);
      ntType();
      ntArgumentName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        ntDefaultNonEmpty();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      break;
    case IDENTIFIER:
    case 9:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        ntEllipsisNonEmpty();
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      ntArgumentName();
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntArgumentName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 61:
    case 62:
      ntArgumentNameKeyword();
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntEllipsis() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      ntEllipsisNonEmpty();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
  }

  final public void ntExceptionMember() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      ntConst();
      break;
    case IDENTIFIER:
    case 9:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntExceptionField();
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntExceptionField() throws ParseException {
    ntType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(11);
  }

  final public void ntExtendedAttributeList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      ntExtendedAttributeListNonEmpty();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
  }

  final public void ntExtendedAttributes() throws ParseException {
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_15;
      }
      jj_consume_token(19);
      ntExtendedAttribute();
    }
  }

  final public void ntExtendedAttribute() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      jj_consume_token(9);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttribute();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      break;
    case 38:
      jj_consume_token(38);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(39);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttribute();
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      break;
    case 13:
      jj_consume_token(13);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      jj_consume_token(14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttribute();
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      break;
    case INTEGER:
    case FLOAT:
    case IDENTIFIER:
    case STRING:
    case OTHER:
    case 7:
    case 8:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      ntOther();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttribute();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntExtendedAttributeRest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case IDENTIFIER:
    case STRING:
    case OTHER:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      ntExtendedAttribute();
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
  }

  final public void ntExtendedAttributeInner() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case IDENTIFIER:
    case STRING:
    case OTHER:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      ntExtendedAttributeInnerNonEmpty();
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
  }

  final public void ntOther() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case OTHER:
      jj_consume_token(OTHER);
      break;
    case 26:
      jj_consume_token(26);
      break;
    case 40:
      jj_consume_token(40);
      break;
    case 41:
      jj_consume_token(41);
      break;
    case 42:
      jj_consume_token(42);
      break;
    case 11:
      jj_consume_token(11);
      break;
    case 43:
      jj_consume_token(43);
      break;
    case 8:
      jj_consume_token(8);
      break;
    case 44:
      jj_consume_token(44);
      break;
    case 45:
      jj_consume_token(45);
      break;
    case 46:
      jj_consume_token(46);
      break;
    case 47:
      jj_consume_token(47);
      break;
    case 27:
      jj_consume_token(27);
      break;
    case 28:
      jj_consume_token(28);
      break;
    case 48:
      jj_consume_token(48);
      break;
    case 49:
      jj_consume_token(49);
      break;
    case 50:
      jj_consume_token(50);
      break;
    case 51:
      jj_consume_token(51);
      break;
    case 25:
      jj_consume_token(25);
      break;
    case 52:
      jj_consume_token(52);
      break;
    case 53:
      jj_consume_token(53);
      break;
    case 23:
      jj_consume_token(23);
      break;
    case 54:
      jj_consume_token(54);
      break;
    case 55:
      jj_consume_token(55);
      break;
    case 56:
      jj_consume_token(56);
      break;
    case 37:
      jj_consume_token(37);
      break;
    case 57:
      jj_consume_token(57);
      break;
    case 58:
      jj_consume_token(58);
      break;
    case 24:
      jj_consume_token(24);
      break;
    case 59:
      jj_consume_token(59);
      break;
    case 60:
      jj_consume_token(60);
      break;
    case 7:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 61:
    case 62:
      ntArgumentNameKeyword();
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntArgumentNameKeyword() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      break;
    case 7:
      jj_consume_token(7);
      break;
    case 22:
      jj_consume_token(22);
      break;
    case 34:
      jj_consume_token(34);
      break;
    case 35:
      jj_consume_token(35);
      break;
    case 16:
      jj_consume_token(16);
      break;
    case 18:
      jj_consume_token(18);
      break;
    case 17:
      jj_consume_token(17);
      break;
    case 32:
      jj_consume_token(32);
      break;
    case 21:
      jj_consume_token(21);
      break;
    case 61:
      jj_consume_token(61);
      break;
    case 12:
      jj_consume_token(12);
      break;
    case 36:
      jj_consume_token(36);
      break;
    case 15:
      jj_consume_token(15);
      break;
    case 33:
      jj_consume_token(33);
      break;
    case 31:
      jj_consume_token(31);
      break;
    case 29:
      jj_consume_token(29);
      break;
    case 20:
      jj_consume_token(20);
      break;
    case 62:
      jj_consume_token(62);
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntOtherOrComma() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOAT:
    case IDENTIFIER:
    case STRING:
    case OTHER:
    case 7:
    case 8:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      ntOther();
      break;
    case 19:
      jj_consume_token(19);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntSingleType();
      break;
    case 9:
      ntUnionType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntSingleType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntNonAnyType();
      break;
    case 48:
      jj_consume_token(48);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntTypeSuffixStartingWithArrayNonEmpty();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntUnionType() throws ParseException {
    jj_consume_token(9);
    ntUnionMemberType();
    label_16:
    while (true) {
      jj_consume_token(56);
      ntUnionMemberType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_16;
      }
    }
    jj_consume_token(10);
  }

  final public void ntUnionMemberType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntNonAnyType();
      break;
    case 9:
      ntUnionType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      break;
    case 48:
      jj_consume_token(48);
      jj_consume_token(38);
      jj_consume_token(39);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntUnionMemberTypes() throws ParseException {
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_17;
      }
      jj_consume_token(56);
      ntUnionMemberType();
    }
  }

  final public void ntNonAnyType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 55:
    case 58:
    case 59:
    case 62:
      ntPrimitiveType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      break;
    case 47:
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      break;
    case 57:
      jj_consume_token(57);
      jj_consume_token(43);
      ntType();
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        ntNullNonEmpty();
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      break;
    case 54:
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      break;
    case 46:
      jj_consume_token(46);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntConstType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 55:
    case 58:
    case 59:
    case 62:
      ntPrimitiveType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        ntNullNonEmpty();
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        ntNullNonEmpty();
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntPrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
    case 58:
    case 59:
      ntUnsignedIntegerType();
      break;
    case 51:
    case 52:
    case 62:
      ntUnrestrictedFloatType();
      break;
    case 49:
      jj_consume_token(49);
      break;
    case 50:
      jj_consume_token(50);
      break;
    case 55:
      jj_consume_token(55);
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntUnrestrictedFloatType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 62:
      jj_consume_token(62);
      ntFloatType();
      break;
    case 51:
    case 52:
      ntFloatType();
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntFloatType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      break;
    case 51:
      jj_consume_token(51);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntUnsignedIntegerType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      ntIntegerType();
      break;
    case 53:
    case 58:
      ntIntegerType();
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntIntegerType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      break;
    case 53:
      jj_consume_token(53);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        ntOptionalLongNonEmpty();
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntOptionalLong() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
      ntOptionalLongNonEmpty();
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
  }

  final public void ntTypeSuffix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
    case 45:
      ntTypeSuffixNonEmpty();
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
  }

  final public void ntTypeSuffixStartingWithArray() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      ntTypeSuffixStartingWithArrayNonEmpty();
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
  }

  final public void ntNull() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      ntNullNonEmpty();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
  }

  final public void ntReturnType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 9:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntType();
      break;
    case 60:
      jj_consume_token(60);
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntExtendedAttributeNoArgs() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void ntExtendedAttributeArgList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 9:
    case 37:
    case 38:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntArgumentListNonEmpty();
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    jj_consume_token(10);
  }

  final public void ntExtendedAttributeIdent() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(8);
    jj_consume_token(IDENTIFIER);
  }

  final public void ntExtendedAttributeNamedArgList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(8);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 9:
    case 37:
    case 38:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 62:
      ntArgumentListNonEmpty();
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    jj_consume_token(10);
  }

  final public void ntDefinitionsNonEmpty() throws ParseException {
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
      ntDefinition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 7:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
      case 20:
      case 38:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_18;
      }
    }
  }

  final public void ntInterfaceMembersNonEmpty() throws ParseException {
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      ntInterfaceMember();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 22:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_19;
      }
    }
  }

  final public void ntDictionaryMembersNonEmpty() throws ParseException {
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      ntDictionaryMember();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 62:
        ;
        break;
      default:
        jj_la1[110] = jj_gen;
        break label_20;
      }
    }
  }

  final public void ntDefaultNonEmpty() throws ParseException {
    jj_consume_token(8);
    ntDefaultValue();
  }

  final public void ntExceptionMembersNonEmpty() throws ParseException {
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntExtendedAttributeListNonEmpty();
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      ntExceptionMember();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 9:
      case 22:
      case 38:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 62:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_21;
      }
    }
  }

  final public void ntInheritanceNonEmpty() throws ParseException {
    jj_consume_token(42);
    jj_consume_token(IDENTIFIER);
  }

  final public void ntEnumValuesNonEmpty() throws ParseException {
    label_22:
    while (true) {
      jj_consume_token(19);
      jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_22;
      }
    }
  }

  final public void ntInheritNonEmpty() throws ParseException {
    jj_consume_token(61);
  }

  final public void ntReadOnlyNonEmpty() throws ParseException {
    jj_consume_token(63);
  }

  final public void ntSpecialsNonEmpty() throws ParseException {
    label_23:
    while (true) {
      ntSpecial();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_23;
      }
    }
  }

  final public void ntOptionalIdentifierNonEmpty() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void ntArgumentListNonEmpty() throws ParseException {
    ntArgument();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_24;
      }
      jj_consume_token(19);
      ntArgument();
    }
  }

  final public void ntArgumentsNonEmpty() throws ParseException {
    label_25:
    while (true) {
      jj_consume_token(19);
      ntArgument();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_25;
      }
    }
  }

  final public void ntEllipsisNonEmpty() throws ParseException {
    jj_consume_token(41);
  }

  final public void ntExtendedAttributeListNonEmpty() throws ParseException {
    jj_consume_token(38);
    ntExtendedAttribute();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_26;
      }
      jj_consume_token(19);
      ntExtendedAttribute();
    }
    jj_consume_token(39);
  }

  final public void ntExtendedAttributesNonEmpty() throws ParseException {
    label_27:
    while (true) {
      jj_consume_token(19);
      ntExtendedAttribute();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_27;
      }
    }
  }

  final public void ntExtendedAttributeRestNonEmpty() throws ParseException {
    ntExtendedAttribute();
  }

  final public void ntExtendedAttributeInnerNonEmpty() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      jj_consume_token(9);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[119] = jj_gen;
        ;
      }
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      break;
    case 38:
      jj_consume_token(38);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[121] = jj_gen;
        ;
      }
      jj_consume_token(39);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      break;
    case 13:
      jj_consume_token(13);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[123] = jj_gen;
        ;
      }
      jj_consume_token(14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[124] = jj_gen;
        ;
      }
      break;
    case INTEGER:
    case FLOAT:
    case IDENTIFIER:
    case STRING:
    case OTHER:
    case 7:
    case 8:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      ntOtherOrComma();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case FLOAT:
      case IDENTIFIER:
      case STRING:
      case OTHER:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
        ntExtendedAttributeInnerNonEmpty();
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntUnionMemberTypesNonEmpty() throws ParseException {
    label_28:
    while (true) {
      jj_consume_token(56);
      ntUnionMemberType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        ;
        break;
      default:
        jj_la1[127] = jj_gen;
        break label_28;
      }
    }
  }

  final public void ntOptionalLongNonEmpty() throws ParseException {
    jj_consume_token(53);
  }

  final public void ntTypeSuffixNonEmpty() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
      jj_consume_token(39);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
      case 45:
        ntTypeSuffixNonEmpty();
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      break;
    case 45:
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ntTypeSuffixStartingWithArrayNonEmpty();
        break;
      default:
        jj_la1[129] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ntTypeSuffixStartingWithArrayNonEmpty() throws ParseException {
    jj_consume_token(38);
    jj_consume_token(39);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
    case 45:
      ntTypeSuffixNonEmpty();
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
  }

  final public void ntNullNonEmpty() throws ParseException {
    jj_consume_token(45);
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[132];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x179088,0x0,0x208,0x1008,0x179088,0x0,0xe0400208,0x0,0x11000,0xe0400208,0x0,0xe0400208,0x0,0xe0400208,0x0,0x208,0x0,0x208,0x0,0x100,0x208,0x0,0x100,0x1f800016,0x0,0x400208,0x0,0x400208,0x0,0x0,0x80000,0x80000,0x0,0x1f800006,0x3000000,0x1c000004,0xe0000208,0x40000a08,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x8,0x208,0x8,0x208,0x80000,0x0,0x100,0x0,0x208,0xe0779088,0x0,0x400208,0x0,0x80000,0xffffbbde,0xfff7bbde,0xffffbbde,0xfff7bbde,0xffffbbde,0xfff7bbde,0xfff7bbde,0xfff7bbde,0xfff7bbde,0xffffbbde,0xfff799de,0xe0779080,0xffff99de,0x0,0x208,0x0,0x8,0x0,0x0,0x0,0x208,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x208,0x208,0x208,0x0,0x179088,0x0,0xe0400208,0x0,0x208,0x0,0x400208,0x80000,0x0,0x80000,0x80000,0x80000,0x80000,0xffffbbde,0xffffbbde,0xffffbbde,0xffffbbde,0xffffbbde,0xffffbbde,0xffffbbde,0xffffbbde,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x40,0x4effc060,0x0,0x0,0x400,0xfeffc05f,0x40,0x0,0xfeffc05f,0x40,0xfeffc05f,0x40,0xfeffc01f,0x400,0x4effc040,0x40,0x4effc040,0x40,0x0,0x4effc040,0x40,0x0,0x0,0x400,0x4effc040,0x40,0x4effc040,0x40,0x400,0x0,0x0,0x40,0x0,0x0,0x0,0xfeffc01f,0xfeffc000,0x20000000,0x80000000,0x20000000,0x80000000,0x1f,0x0,0x1f,0x1f,0x0,0x4effc060,0x0,0x4effc060,0x0,0x40,0x0,0x200,0x4effc020,0x6000001f,0x200,0x4effc000,0x40,0x0,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff3f,0x6000001f,0x7fffff3f,0x2040,0x4effc000,0x40,0x4effc000,0x1000000,0x2040,0x2040,0x4effc000,0x1000000,0x2040,0x2040,0x2040,0x2000,0x2040,0x2040,0x4efec000,0x2000,0x2000,0x4cbe0000,0x4cbe0000,0x40180000,0x180000,0xc200000,0x200000,0x4200000,0x200000,0x2040,0x40,0x2000,0x5effc000,0x4effc060,0x4effc060,0x40,0x40,0x40,0xfeffc05f,0x40,0x4effc040,0x40,0x4effc040,0x0,0x1f,0x0,0x0,0x0,0x0,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x7fffff7f,0x1000000,0x2040,0x40,0x2040,0x2040,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 132; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 132; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
