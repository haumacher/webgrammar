/* Generated By:JavaCC: Do not edit this line. WebGrammarParser.java */
package de.haumacher.webgrammar.parser;

import java.util.*;
import de.haumacher.webgrammar.model.*;

/**
 * Parser that builds an {@link Expr} tree from its textual representation.
 * 
 * @author <a href="http://haumacher.de">Bernhard Haumacher</a>
 */
@SuppressWarnings({ "javadoc", "unused", "synthetic-access" })
public class WebGrammarParser implements WebGrammarParserConstants {

        private String str(Token t) {
                return t.image.substring(1, t.image.length() - 1);
        }

  final public Grammar grammar() throws ParseException {
  List<Annotation> a;
  Grammar g = F.grammar();
  Rule p;
    a = annotations();
    g.setAnnotations(a);
    jj_consume_token(GRAMMAR);
    jj_consume_token(13);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 16:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      p = rule();
      g.getRules().add(p);
    }
    jj_consume_token(14);
    {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

  final public Rule rule() throws ParseException {
  List<Annotation> a;
  Token t;
  Rule r;
    a = annotations();
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      r = contextFreeRule(a, t.image);
      break;
    case 21:
      r = tokenRule(a, t.image);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(15);
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public List<Annotation> annotations() throws ParseException {
  List<Annotation> l = F.annotations();
  Annotation a;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      a = annotation();
      l.add(a);
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Annotation annotation() throws ParseException {
  Annotation a = F.annotation();
  Token n;
  Argument arg;
    jj_consume_token(16);
    n = jj_consume_token(IDENTIFIER);
    a.setName(n.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 16:
        arg = arg();
            a.getArguments().add(arg);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 18:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(18);
          arg = arg();
          a.getArguments().add(arg);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(19);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Argument arg() throws ParseException {
  Argument a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      a = qname();
      break;
    case 16:
      a = annotation();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Argument qname() throws ParseException {
  Name n;
  QName q = null;
  Token t;
    t = jj_consume_token(IDENTIFIER);
    n = F.name(t.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(20);
      t = jj_consume_token(IDENTIFIER);
      if (q == null)
      {
        q = F.qname();
        q.getNames().add(n);
      }
      q.getNames().add(F.name(t.image));
    }
    {if (true) return q == null ? n : q;}
    throw new Error("Missing return statement in function");
  }

  final public TokenRule tokenRule(List<Annotation> a, String name) throws ParseException {
  TokenRule r = F.regexpRule();
  Regexp e;
    jj_consume_token(21);
    e = regexp();
    r.setAnnotations(a);
    r.setName(name);
    r.setExpression(e);
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public ContextFreeRule contextFreeRule(List<Annotation> a, String name) throws ParseException {
  ContextFreeRule r = F.nonTerminalRule();
  Expression e;
    jj_consume_token(22);
    e = expansions();
    r.setAnnotations(a);
    r.setName(name);
    r.setExpression(e);
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Regexp regexp() throws ParseException {
  Regexp s;
  Regexp e;
  RegexpAlternative a = null;
    s = regexpSequence();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(23);
      e = regexpSequence();
      if (a == null) {
              a = F.regexpAlternative();
              a.getExpressions().add(s);
      }
      a.getExpressions().add(e);
    }
        {if (true) return a == null ? s : a;}
    throw new Error("Missing return statement in function");
  }

  final public RegexpSequence regexpSequence() throws ParseException {
  Regexp a;
  RegexpSequence s = F.regexpSequence();
    label_6:
    while (true) {
      a = regexpAtom();
      s.getExpressions().add(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case IDENTIFIER:
      case 17:
      case 24:
      case 25:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Regexp regexpAtom() throws ParseException {
  Regexp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      e = regexpString();
      break;
    case IDENTIFIER:
      e = regexpIdentifier();
      break;
    case 17:
      e = regexpGroup();
      break;
    case 24:
    case 25:
      e = regexpAlphabet();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Regexp regexpAlphabet() throws ParseException {
  RegexpAlphabet a = F.regexpAlphabet();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
          a.setNegative(true);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(25);
    regexpRanges(a);
    jj_consume_token(26);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Regexp regexpGroup() throws ParseException {
  Regexp c;
  RegexpOptional o;
  RegexpZeroOrMore z;
  RegexpOneOrMore m;
    jj_consume_token(17);
    c = regexp();
    jj_consume_token(19);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
    case 28:
    case 29:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
      o = F.regexpOptional();
      o.setExpression(c);
      c = o;
        break;
      case 28:
        jj_consume_token(28);
      z = F.regexpZeroOrMore();
      z.setExpression(c);
      c = z;
        break;
      case 29:
        jj_consume_token(29);
      m = F.regexpOneOrMore();
      m.setExpression(c);
      c = m;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public RegexpString regexpString() throws ParseException {
  RegexpString e = F.regexpString();
  Token s;
    s = jj_consume_token(STRING);
    e.setContent(str(s));
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public RegexpIdentifier regexpIdentifier() throws ParseException {
  RegexpIdentifier e = F.regexpIdentifier();
  Token i;
    i = jj_consume_token(IDENTIFIER);
    e.setName(i.image);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public void regexpRanges(RegexpAlphabet a) throws ParseException {
  CharRange r;
    r = charRange();
    a.getRanges().add(r);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(18);
      r = charRange();
      a.getRanges().add(r);
    }
  }

  final public CharRange charRange() throws ParseException {
  Token t;
  CharRange r = F.charRange();
    t = jj_consume_token(STRING);
    r.setFirst(str(t));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      t = jj_consume_token(STRING);
      r.setLast(str(t));
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expansions() throws ParseException {
  Expression e1;
  Expression e2;
  Alternative a = null;
    e1 = expansion();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      jj_consume_token(23);
      e2 = expansion();
      if (a == null)
      {
        a = F.alternative();
        a.getExpressions().add(e1);
      }
      a.getExpressions().add(e2);
    }
    {if (true) return a == null ? e1 : a;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expansion() throws ParseException {
  Expression r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      r = epsilon();
      break;
    case STRING:
    case IDENTIFIER:
    case 17:
      r = symbols();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Epsilon epsilon() throws ParseException {
    jj_consume_token(31);
    {if (true) return F.emptyExpression();}
    throw new Error("Missing return statement in function");
  }

  final public Expression symbols() throws ParseException {
  Expression r = null;
  Expression s;
  Concat c = null;
    label_9:
    while (true) {
      s = symbol();
      if (r == null) {
        r = s;
      } else {
        if (c == null) {
          c = F.concat();
          c.getExpressions().add(r);
          r = c;
        }
        c.getExpressions().add(s);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case IDENTIFIER:
      case 17:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Expression symbol() throws ParseException {
  Expression s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      s = constant();
      break;
    case IDENTIFIER:
      s = nonTerminal();
      break;
    case 17:
      s = parentesis();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parentesis() throws ParseException {
  Token t;
  Expression s = null;
  Expression e;
  ModifiedExpression m;
  Iteration i;
    jj_consume_token(17);
    e = expansions();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      s = expansions();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(19);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case 27:
    case 28:
    case 29:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
      m = F.optional();
      m.setExpression(e);
      e = m;
        break;
      case 28:
        jj_consume_token(28);
      i = F.zeroOrMore();
      i.setExpression(e);
      i.setSeparator(s);
      e = i;
        break;
      case 29:
        jj_consume_token(29);
      i = F.oneOrMore();
      i.setExpression(e);
      i.setSeparator(s);
      e = i;
        break;
      case 25:
        jj_consume_token(25);
        t = jj_consume_token(INTEGER);
        jj_consume_token(32);
        jj_consume_token(26);
      i = F.iteration();
      i.setExpression(e);
      i.setSeparator(s);
      i.setMin(Integer.parseInt(t.image));
      e = i;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Constant constant() throws ParseException {
  Token t;
  Constant c = F.constant();
    t = jj_consume_token(STRING);
    c.setContent(str(t));
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public NonTerminal nonTerminal() throws ParseException {
  Token t;
  NonTerminal n = F.nonTerminal();
    t = jj_consume_token(IDENTIFIER);
    n.setName(t.image);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public WebGrammarParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10400,0x600000,0x10000,0x40000,0x10400,0x20000,0x10400,0x100000,0x800000,0x3020500,0x3020500,0x1000000,0x38000000,0x38000000,0x40000,0x40000000,0x800000,0x80020500,0x20500,0x20500,0x40000,0x3a000000,0x3a000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public WebGrammarParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WebGrammarParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WebGrammarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public WebGrammarParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WebGrammarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public WebGrammarParser(WebGrammarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(WebGrammarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
